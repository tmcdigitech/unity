[{"id":0,"href":"/unity/01gettingStarted/","title":"Getting started","parent":"DigiTech@TMC","content":""},{"id":1,"href":"/unity/02basics/unity/","title":"Unity","parent":"Learning the basics","content":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78  using System.Collections; using System.Collections.Generic; using UnityEngine; public class Player : MonoBehaviour { private Rigidbody2D rb; public float speed; public float angSpeed; public GameObject explosionTemplate; // Start is called before the first frame update  void Start() { rb = GetComponent\u0026lt;Rigidbody2D\u0026gt;(); } // Update is called once per frame  void Update() { } // FixedUpdate is called once per physics engine round  void FixedUpdate() { //Update rotation  rb.MoveRotation(rb.rotation - Input.GetAxis(\u0026#34;Horizontal\u0026#34;) * angSpeed * Time.fixedDeltaTime); //Update position  Vector3 pos = transform.position; float y = Input.GetAxis(\u0026#34;Vertical\u0026#34;) * speed * Time.deltaTime; Vector2 velocityChange = new Vector3(0, y); velocityChange = this.transform.rotation * velocityChange; rb.velocity += velocityChange; //Handle screen wrapping  int margin = 50; Vector2 screenPos = Camera.main.WorldToScreenPoint(this.transform.position); if( screenPos.x \u0026gt; Screen.width+margin ){ //off right, move to left  screenPos.x = -margin; } if( screenPos.x \u0026lt; -margin ){ //off left, move to right  screenPos.x = Screen.width+margin; } if( screenPos.y \u0026gt; Screen.height+margin ){ //off right, move to left  screenPos.y = -margin; } if( screenPos.y \u0026lt; -margin ){ //off left, move to right  screenPos.y = Screen.height+margin; } Vector3 newWorldPosition = Camera.main.ScreenToWorldPoint(screenPos); this.transform.position = new Vector2(newWorldPosition.x, newWorldPosition.y); } public void OnCollisionEnter2D(Collision2D other) { if( other.gameObject.CompareTag(\u0026#34;Rock\u0026#34;) || other.gameObject.CompareTag(\u0026#34;RockSmall\u0026#34;) ){ this.gameObject.SetActive(false); GameObject explosion = Instantiate(explosionTemplate, this.transform.position, this.transform.rotation) as GameObject; } } public void OnTriggerEnter2D(Collider2D other) { if( other.gameObject.CompareTag(\u0026#34;Token\u0026#34;) ){ Destroy(other.gameObject); } } }   "},{"id":2,"href":"/unity/02basics/","title":"Learning the basics","parent":"DigiTech@TMC","content":""},{"id":3,"href":"/unity/glossary/","title":"Glossary","parent":"DigiTech@TMC","content":""},{"id":4,"href":"/unity/troubleshooting/","title":"Troubleshooting","parent":"DigiTech@TMC","content":""},{"id":5,"href":"/unity/reference/","title":"Reference materials","parent":"DigiTech@TMC","content":" TMC Company Portal links  Unity UnityHub Visual Studio Code   Unity Manual  "},{"id":6,"href":"/unity/teaching/","title":"Teaching materials","parent":"DigiTech@TMC","content":""},{"id":7,"href":"/unity/glossary/argument/","title":"argument","parent":"Glossary","content":"When calling a function, the values given to it are called arguments. For example, in this case:\ntotal = add(3, 4) 3 and 4 are arguments to the function add().\nWhen defining a function, the pieces of information that the function takes to do its job are called parameters.\n"},{"id":8,"href":"/unity/categories/","title":"Categories","parent":"DigiTech@TMC","content":""},{"id":9,"href":"/unity/glossary/color/","title":"color/colour","parent":"Glossary","content":"In almost all programming, American spellings are used. So as programmers we use colors, even though we would normally spell the word colours.\nColors are slightly different on the Gemma from most other programming environments. For most programming, colors are described by the amount of red, green, and blue light to emit. These numbers are normally in the range 0 to 255. In Python, we list these as a tuple (red, green, blue), such as:\n(0, 150, 255) The built-in RGB LED on your Gemma (a Dotstar) has these three color components, so we set its color in this way.\nThe Neopixel RGB LEDs you will solder onto your Gemma have four components: the usual red, green, and blue and also white. So you if you wanted the above color on your Neopixel LED strip, you would use:\n(0, 150, 255, 0) Unless you want to set a particular LED pixel to be white in color, it is recommended that you set the white value to zero (0), as the white tends to wash out the colors otherwise.\nYou can use the Google Color Picker to find different colors, and then copy the RGB value listed. Don\u0026rsquo;t forget to add a value for the white (probably zero) after the other three numbers, if you are setting Neopixel colors.\n"},{"id":10,"href":"/unity/","title":"DigiTech@TMC","parent":"","content":"Welcome to Digital Technology @ TMC!\n"},{"id":11,"href":"/unity/glossary/import/","title":"import","parent":"Glossary","content":"Importing is the process of adding functions from additional libraries to support your program.\nImagine we wish to use the randint() function to choose a random number between 1 and 6, as though we were throwing a single six-sided die.\nThe randint() function is included in the random library, but there are three ways we can import it, and each has its attractions.\nimport    1 2 3 4  import random num = random.randint(1,6) print(num)   import as    1 2 3 4  import random as ran num = ran.randint(1,6) print(num)   import from    1 2 3 4  from random import randint num = randint(1,6) print(num)   "},{"id":12,"href":"/unity/glossary/parameter/","title":"parameter","parent":"Glossary","content":"When defining a function, the pieces of information that the function takes to do its job are called parameters. For example, here:\ndef add(first, second): return first + second first and second are the parameters of the function add().\nWhen calling a function, the values given to it are called arguments.\n"},{"id":13,"href":"/unity/teaching/siteUrl/","title":"Site URL ðŸ¡„ðŸ¡†","parent":"Teaching materials","content":"Learn about Unity here:\nhttps://tmcdigitech.github.io/unity/\n"},{"id":14,"href":"/unity/01gettingStarted/installation/","title":"Software","parent":"Getting started","content":"To develop projects in Unity you will need to download:\n TMC Company Portal links  Unity UnityHub Visual Studio Code (or another editor)    "},{"id":15,"href":"/unity/tags/","title":"Tags","parent":"DigiTech@TMC","content":""},{"id":16,"href":"/unity/glossary/type/","title":"type","parent":"Glossary","content":"See also Types in Unity.\nComputers store all information as sequences of numbers, but different kinds of data are encoded in different ways. For example, whole numbers and decimal numbers are stored differently.\nSome common data types you\u0026rsquo;ll encounter are:\n integers (int) Integers are whole numbers, and can be positive or negative. booleans (bool) Booleans are either true or false, and are used for logic and decision making. floating point numbers (float and double) Floating point numbers (commonly called floats) are for storing decimal numbers. The number is stored in scientific notation, with a mantissa and exponent.    \\[\\overbrace{3.18}^{\\text{mantissa}}\\times 10^{\\overbrace{-7}^{\\text{exponent}}}\\]  There is a limited number of digits for the mantissa and the exponent. If you need more, a double precision floating point number (or double for short) has twice the space, so can store a more precise mantissa, and a larger exponent. characters (char) A character is a single letter, digit, punctuation mark, or piece of whitespace (a space, newline, tab, etc.). strings (string) Strings are so called because they are \u0026lsquo;strings of characters\u0026rsquo;. They are usually indicated with double quotes \u0026ldquo;like this\u0026rdquo;. In some languages, like Python, strings can be in single quotes as well, \u0026lsquo;like this\u0026rsquo;.  "},{"id":17,"href":"/unity/glossary/typeUnity/","title":"types in Unity","parent":"Glossary","content":"GameObject\nQuaternion\nEulerAngle\nVector2/Vector3\n"},{"id":18,"href":"/unity/glossary/variable/","title":"variable","parent":"Glossary","content":"A variable is a named place to store a piece of information.\n"},{"id":19,"href":"/unity/troubleshooting/01whybroken/","title":"Why won't my program work?","parent":"Troubleshooting","content":"Here is a checklist of things to look for if something is wrong\u0026hellip;\nSpelling and Capitalisation    Remember that the computer is really, really, really, really stupid. It will recognise only words it has been taught; it is not clever enough to handle spelling mistakes - these will confuse it. It is also not clever enough to know that most of the time we use A and a interchangeably, so you have to make sure that if the computer is expecting a capital letter, you give it one, and vice versa.\n"}]